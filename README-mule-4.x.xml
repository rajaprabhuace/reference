<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="transform-messages-code-snippet" doc:id="4ed4dfee-9895-4458-884b-0a7c6bce1d6b">
		<ee:transform doc:name="Transform Message" doc:id="285c19e9-9b72-4577-b38d-d0976c605a34">
			<ee:message>
				<ee:set-payload resource="classpath:dwl/sample.dwl" />
				<ee:set-attributes resource="classpath:dwl/sample-attributes.dwl" />
			</ee:message>
			<ee:variables>
				<ee:set-variable resource="classpath:dwl/sample-var.dwl" variableName="sampleVar" />
			</ee:variables>
		</ee:transform>
	</flow>
	
<!-- 
	============================================================================
	
	output application/json indent=false, skipNullOn="everywhere" encoding="UTF-8"
	output application/xml writeDeclaration=true, indent=false, skipNullOn="everywhere" encoding="UTF-8"
	read("<prices><price>9.99</price><price>10.99</price></prices>","application/xml")
	
	============================================================================
	
	Declare using function directive
	%function toUser(user) {firstName: user.givenName, lastName: user.sn}
	
	Assign to a var
	%var toUser = (user) -> {firstName: user.givenName, lastName: user.sn}

	Using Filter on an Array
	filter(Array<T>, (item: T, index: Number) -> Boolean): Array<T>
	payload filter ((item, index) -> (item.id == "A1"))
	
	Using Map to Return an Array
	map(Array<T>, (item: T, index: Number) -> R): Array<R>
	payload map (item, index) -> {(index) : item}
	
	Map Object
	mapObject({ (K)?: V }, (value: V, key: K, index: Number) -> Object): Object
	payload mapObject (value, key, index) -> {(index) : {(value):key}}
	
	Reduction expression to the elements in an array.
	reduce(Array<T>, (item: T, accumulator: T) -> T): T | Null
	["a", "b", "c", "d"] reduce ((item, acc = "z") -> acc ++ item)
	[0, 1, 2, 3, 4, 5] reduce ((item, acc = 3) -> acc + item)
	
	pluck({ (K)?: V }, (value: V, key: K, index: Number) -> R): Array<R>
	{"a":"b","c":"d"} pluck (value,key,index) -> { (index) : { (value):key} }
	
	sizeOf(Array<Any>): Number
	sizeOf([ "a", "b", "c"])
	sizeOf({a: 1, b: 2})
	sizeOf("abc")
	
	splitBy(String, Regex): Array<String>
	"192.88.99.0/24" splitBy(/[.\/]/)
	"hello world" splitBy(/\s/)
	
	splitBy(String, String): Array<String>
	"192.88.99.0" splitBy(".")
	
	trim(String): String
	trim("    abc    ")
	trim(null)
	
	uuid(): String
	uuid()
	
	contains(Array<T>, Any): Boolean
	[ 1, 2, 3, 4 ] contains(2)
	ContainsRequestedItem: payload.root.*order.*items contains "3"
	
	contains(String, String): Boolean
	"mulesoft" contains("mule")
	
	contains(String, Regex): Boolean
	contains("mulesoft", /[e-g]/)
	
	groupBy(Array<T>, (item: T, index: Number) -> R): { (R): Array<T> }
	["a","b","c"] groupBy (item, index) -> index
	[
	   { "name": "Foo", "language": "Java" },
	   { "name": "Bar", "language": "Scala" },
	   { "name": "FooBar", "language": "Java" }
	] groupBy (item) -> item.language
	[
        {"id": "internal"},
        {"id": "left", "label": "Move Left"},
        {"id": "right", "label": "Move Right"},
        {"id": "up", "label": "Move Up"},
        {"id": "down", "label": "Move Down"}
    ] groupBy "myLabels"
	{ "a" : "b", "c" : "d"} groupBy (value) -> upper(value)
	read("<prices><price>9.99</price><price>10.99</price></prices>","application/xml") groupBy "costs"
	isBlank(String | Null): Boolean
	isBlank(" 1234")
	
	isEmpty(Array<Any>): Boolean
	[ isEmpty([]), isEmpty([1]) ]
	
	isEmpty(String): Boolean
	[ isEmpty(""), isEmpty("DataWeave") ]
	
	isEmpty(Null): Boolean
	isEmpty(null)
	
	isEmpty(Object): Boolean
	[ isEmpty({}), isEmpty({name: "DataWeave"}) ]
	
	joinBy(Array<Any>, String): String
	["a","b","c"] joinBy "-"
	
	flatten(Array<Array<T> | Q>): Array<T | Q>
	flatten([ [0.0, 0], [1,1], [2,3], [5,8] ])
	
	upper(String): String
	upper("mulesoft")
	
	write(Any, String, Object): String | Binary
	write("world", "text/plain")
	write(payload, "application/csv", {"header":true, "separator" : "|"}
	
 -->
</mule>
