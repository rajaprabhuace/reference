<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">

	<flow name="transform-messages-code-snippet">

		<dw:transform-message doc:name="Transform Message">
			<dw:input-payload doc:sample="samples\sample.xml" mimeType="application/xml" />
			<dw:input-variable variableName="sampleFlowVar" doc:sample="samples\sample-flow-var.xml"
				mimeType="application/xml" />
			<dw:input-session-variable variableName="sampleSessionVar"
				doc:sample="samples\sample-session-var.xml" />
			<dw:set-payload resource="classpath:dwl/sample.dwl" />
			<dw:set-variable variableName="sampleFlowVar2" resource="classpath:dwl/sample-flow-var.dwl" />
			<dw:set-session-variable variableName="sampleSessionVar2"
				resource="classpath:dwl/sample-session-var.dwl" />
			<dw:set-property propertyName="Sample-Property-Name" resource="classpath:dwl/sample-property-name.dwl" />
		</dw:transform-message>

	</flow>
	
<!-- 

	%var inUname = inboundProperties['userName']
	%var outUname = outboundProperties['userName']
	%var uname = flowVars['userName']
	
	============================================================================
	
	%output application/xml indent=false, skipNullOn="everywhere" encoding="UTF-8"
	
	============================================================================

	Using Filter on an Array
	filter(Array<T>, (item: T, index: Number) -> Boolean): Array<T>
	payload filter ((item, index) -> (item.id == "A1"))
	
	Using Map to Return an Array
	map(Array<T>, (item: T, index: Number) -> R): Array<R>
	payload map (item, index) -> {(index) : item}
	
	Map Object
	mapObject({ (K)?: V }, (value: V, key: K, index: Number) -> Object): Object
	payload mapObject (value, key, index) -> {(index) : {(value):key}}
	
	reduce(Array<T>, (item: T, accumulator: T) -> T): T | Null
	["a", "b", "c", "d"] reduce ((item, acc = "z") -> acc ++ item)
	[0, 1, 2, 3, 4, 5] reduce ((item, acc = 3) -> acc + item)
	
	Concat - (':array')/(':string')/(':object') ⇒ ':number'
	sizeOf [1,2,3]
	sizeOf "MuleSoft"
	sizeOf {a:1,b:2}

	Flatten - (':array') ⇒ ':array'
	flatten payload
	
	Upper - (':string') ⇒ ':string'
	upper "mulesoft"
		
	Pluck Keys
	payload pluck $$

	Pluck Values
	payload pluck $

	Join By
	["a","b","c"] joinBy "-"

	Split By
	"a-b-c" splitBy "-"

	Order By
	[{ letter: "d" }, { letter: "e" }, { letter: "c" }, { letter: "a" }, { letter: "b" }] orderBy $.letter

	Array Push
	[0, 1, 2] + 5
	
	Matches
	(':string', ':regex') ⇒ ':boolean'
	"admin123" matches /(\d+)/
	
 -->

</mule>
